//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import RswiftResources
import UIKit

private class BundleFinder {}
let R = _R(bundle: Bundle(for: BundleFinder.self))

struct _R {
  let bundle: Foundation.Bundle

  let reuseIdentifier = reuseIdentifier()

  var string: string { .init(bundle: bundle, preferredLanguages: nil, locale: nil) }
  var color: color { .init(bundle: bundle) }
  var image: image { .init(bundle: bundle) }
  var info: info { .init(bundle: bundle) }
  var nib: nib { .init(bundle: bundle) }
  var storyboard: storyboard { .init(bundle: bundle) }

  func string(bundle: Foundation.Bundle) -> string {
    .init(bundle: bundle, preferredLanguages: nil, locale: nil)
  }
  func string(locale: Foundation.Locale) -> string {
    .init(bundle: bundle, preferredLanguages: nil, locale: locale)
  }
  func string(preferredLanguages: [String], locale: Locale? = nil) -> string {
    .init(bundle: bundle, preferredLanguages: preferredLanguages, locale: locale)
  }
  func color(bundle: Foundation.Bundle) -> color {
    .init(bundle: bundle)
  }
  func image(bundle: Foundation.Bundle) -> image {
    .init(bundle: bundle)
  }
  func info(bundle: Foundation.Bundle) -> info {
    .init(bundle: bundle)
  }
  func nib(bundle: Foundation.Bundle) -> nib {
    .init(bundle: bundle)
  }
  func storyboard(bundle: Foundation.Bundle) -> storyboard {
    .init(bundle: bundle)
  }
  func validate() throws {
    try self.nib.validate()
    try self.storyboard.validate()
  }

  struct project {
    let developmentRegion = "en"
  }

  /// This `_R.string` struct is generated, and contains static references to 2 localization tables.
  struct string {
    let bundle: Foundation.Bundle
    let preferredLanguages: [String]?
    let locale: Locale?
    var appConstants: appConstants { .init(source: .init(bundle: bundle, tableName: "AppConstants", preferredLanguages: preferredLanguages, locale: locale)) }
    var localizable: localizable { .init(source: .init(bundle: bundle, tableName: "Localizable", preferredLanguages: preferredLanguages, locale: locale)) }

    func appConstants(preferredLanguages: [String]) -> appConstants {
      .init(source: .init(bundle: bundle, tableName: "AppConstants", preferredLanguages: preferredLanguages, locale: locale))
    }
    func localizable(preferredLanguages: [String]) -> localizable {
      .init(source: .init(bundle: bundle, tableName: "Localizable", preferredLanguages: preferredLanguages, locale: locale))
    }


    /// This `_R.string.appConstants` struct is generated, and contains static references to 1 localization keys.
    struct appConstants {
      let source: RswiftResources.StringResource.Source

      /// Value: https://reqres.in/api/
      ///
      /// Key: serverBaseUrl
      var serverBaseUrl: RswiftResources.StringResource { .init(key: "serverBaseUrl", tableName: "AppConstants", source: source, developmentValue: nil, comment: nil) }
    }

    /// This `_R.string.localizable` struct is generated, and contains static references to 8 localization keys.
    struct localizable {
      let source: RswiftResources.StringResource.Source

      /// Value: Edit Profile
      ///
      /// Key: editUserProfileTitle
      var editUserProfileTitle: RswiftResources.StringResource { .init(key: "editUserProfileTitle", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// Value: Login Failed!
      ///
      /// Key: loginFailed
      var loginFailed: RswiftResources.StringResource { .init(key: "loginFailed", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// Value: Login Success!
      ///
      /// Key: loginSuccess
      var loginSuccess: RswiftResources.StringResource { .init(key: "loginSuccess", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// Value: Software
      ///
      /// Key: software
      var software: RswiftResources.StringResource { .init(key: "software", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// Value: Support Reqres!
      ///
      /// Key: supportReqres
      var supportReqres: RswiftResources.StringResource { .init(key: "supportReqres", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// Value: Update Failed!
      ///
      /// Key: updateFailed
      var updateFailed: RswiftResources.StringResource { .init(key: "updateFailed", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// Value: Updated Successfully!
      ///
      /// Key: updateSuccess
      var updateSuccess: RswiftResources.StringResource { .init(key: "updateSuccess", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// Value: Profile
      ///
      /// Key: userProfileTitle
      var userProfileTitle: RswiftResources.StringResource { .init(key: "userProfileTitle", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }
    }
  }

  /// This `_R.color` struct is generated, and contains static references to 1 colors.
  struct color {
    let bundle: Foundation.Bundle

    /// Color `AccentColor`.
    var accentColor: RswiftResources.ColorResource { .init(name: "AccentColor", path: [], bundle: bundle) }
  }

  /// This `_R.image` struct is generated, and contains static references to 1 images.
  struct image {
    let bundle: Foundation.Bundle

    /// Image `sparkles`.
    var sparkles: RswiftResources.ImageResource { .init(name: "sparkles", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }
  }

  /// This `_R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    let bundle: Foundation.Bundle
    var uiApplicationSceneManifest: uiApplicationSceneManifest { .init(bundle: bundle) }

    func uiApplicationSceneManifest(bundle: Foundation.Bundle) -> uiApplicationSceneManifest {
      .init(bundle: bundle)
    }

    struct uiApplicationSceneManifest {
      let bundle: Foundation.Bundle

      let uiApplicationSupportsMultipleScenes: Bool = false

      var _key: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest"], key: "_key") ?? "UIApplicationSceneManifest" }
      var uiSceneConfigurations: uiSceneConfigurations { .init(bundle: bundle) }

      func uiSceneConfigurations(bundle: Foundation.Bundle) -> uiSceneConfigurations {
        .init(bundle: bundle)
      }

      struct uiSceneConfigurations {
        let bundle: Foundation.Bundle
        var _key: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest", "UISceneConfigurations"], key: "_key") ?? "UISceneConfigurations" }
        var uiWindowSceneSessionRoleApplication: uiWindowSceneSessionRoleApplication { .init(bundle: bundle) }

        func uiWindowSceneSessionRoleApplication(bundle: Foundation.Bundle) -> uiWindowSceneSessionRoleApplication {
          .init(bundle: bundle)
        }

        struct uiWindowSceneSessionRoleApplication {
          let bundle: Foundation.Bundle
          var defaultConfiguration: defaultConfiguration { .init(bundle: bundle) }

          func defaultConfiguration(bundle: Foundation.Bundle) -> defaultConfiguration {
            .init(bundle: bundle)
          }

          struct defaultConfiguration {
            let bundle: Foundation.Bundle
            var uiSceneConfigurationName: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication"], key: "UISceneConfigurationName") ?? "Default Configuration" }
            var uiSceneDelegateClassName: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate" }
          }
        }
      }
    }
  }

  /// This `_R.nib` struct is generated, and contains static references to 1 nibs.
  struct nib {
    let bundle: Foundation.Bundle

    /// Nib `UserTVCell`.
    var userTVCell: RswiftResources.NibReferenceReuseIdentifier<UserTVCell, UserTVCell> { .init(name: "UserTVCell", bundle: bundle, identifier: "UserTVCell") }

    func validate() throws {

    }
  }

  /// This `_R.reuseIdentifier` struct is generated, and contains static references to 1 reuse identifiers.
  struct reuseIdentifier {

    /// Reuse identifier `UserTVCell`.
    let userTVCell: RswiftResources.ReuseIdentifier<UserTVCell> = .init(identifier: "UserTVCell")
  }

  /// This `_R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    let bundle: Foundation.Bundle
    var launchScreen: launchScreen { .init(bundle: bundle) }
    var main: main { .init(bundle: bundle) }

    func launchScreen(bundle: Foundation.Bundle) -> launchScreen {
      .init(bundle: bundle)
    }
    func main(bundle: Foundation.Bundle) -> main {
      .init(bundle: bundle)
    }
    func validate() throws {
      try self.launchScreen.validate()
      try self.main.validate()
    }


    /// Storyboard `LaunchScreen`.
    struct launchScreen: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = UIKit.UIViewController

      let bundle: Foundation.Bundle

      let name = "LaunchScreen"
      func validate() throws {

      }
    }

    /// Storyboard `Main`.
    struct main: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "Main"

      var editUserProfileVC: RswiftResources.StoryboardViewControllerIdentifier<EditUserProfileVC> { .init(identifier: "EditUserProfileVC", storyboard: name, bundle: bundle) }
      var loginVC: RswiftResources.StoryboardViewControllerIdentifier<LoginVC> { .init(identifier: "LoginVC", storyboard: name, bundle: bundle) }
      var userListingVC: RswiftResources.StoryboardViewControllerIdentifier<UserListingVC> { .init(identifier: "UserListingVC", storyboard: name, bundle: bundle) }
      var userProfileVC: RswiftResources.StoryboardViewControllerIdentifier<UserProfileVC> { .init(identifier: "UserProfileVC", storyboard: name, bundle: bundle) }

      func validate() throws {
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "camera") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'camera' is used in storyboard 'Main', but couldn't be loaded.") } }
        if UIKit.UIImage(named: "sparkles", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'sparkles' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIColor(named: "AccentColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'AccentColor' is used in storyboard 'Main', but couldn't be loaded.") }
        if editUserProfileVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'editUserProfileVC' could not be loaded from storyboard 'Main' as 'EditUserProfileVC'.") }
        if loginVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'loginVC' could not be loaded from storyboard 'Main' as 'LoginVC'.") }
        if userListingVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'userListingVC' could not be loaded from storyboard 'Main' as 'UserListingVC'.") }
        if userProfileVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'userProfileVC' could not be loaded from storyboard 'Main' as 'UserProfileVC'.") }
      }
    }
  }
}